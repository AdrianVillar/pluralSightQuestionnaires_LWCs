Section 1 Getting Started
- Re-visiting the scenario (SLIDE)
- Cloning the repository and creating a scratch org with SFDX
- Re-visiting the Lightning Design System Starter kit
- Re-visiting the Aura Components solution
- The agenda for this course

Section 2 Playgrounds
- Introducing Playgrounds (SLIDE + DEMO)
- Creating 'Composite Web Components'
- Add Questionnaire Web Component
- Add QuestionnaireList Web Component
- Camel Case and Hyphens!!
- Add Questionnaire Card Component
- Add Questionnaire Answer Web Component
- Download the solution

Section 3 Events
- Introducing Events in Lightning Web Components
- Simple Events : open a Questionnaire
- Add event to Close a Questionnaire
- Download the solution

Section 3 'Composite' Lightning Web Components
- Introducing Lightning Web Components (SLIDE)
- Introducing Visual Studio Code and Salesforce Extensions
- Create the QuestionnaireCard Composite Lightning Web Component
- The XML files
- Create the QuestionnaireList Composite Lightning Web Component
- Create the QuestionnaireLWC Composite Lightning Web Component
- Create the QuestionnaireAnswer Composite Lightning Web Component
- Adding the Questionnaires LWC Custom Tab to the Application

Section 4 Working with Data
- Calling Apex : to populate the list of Questionnaires.
- One-way binding : opening a Questionnaire (SLIDE)
- Lifecycle Hook 1: connectedCallback (Initialising properties for the Questionnaire)
- Lightning Data Service (Question/Return/Answer)
- Imports: Displaying Toasts
- Performing CRUD operations in Lightning Web Components (SLIDE)
- Saving a Questionnaire Return
- Saving an Answer
- Lifecycle Hook 2: renderedCallback (Saving an Answer BEFORE saving the Return .... only if the values are in the markup??)

Section 5 The Final Solution
- The issue with the Questionnaire List
- Event Bubbling - stop.propagation()!!
- 1st Rule of Fight Club: DO NOT manipulate the JSON in the parent.
- Calling Apex and getting refreshed data
- Lifecycle Hook 3: renderedCallback (Updating Cards - beware the infinite loop)
- Submitting the Return

Review
- less code (metrics) - top half of aura was the problem!
- the list of things that are not there anymore!
- the ominpresent 'this' keyword - to be used with care!
- one-way binding requires thought and control
- LDS and Apex calls are FAR simpler
- Apex call cache efficiency is nice - even if refresh needs to be explicit
- imports ==> learning curve

Overall, a more enjoyable programming experience than with aura components
- learning curve is not as big as aura developers fear
- javascript devs (esp ng,react,vue) will LOVE it
- I threw a complicated application at it and got it to work (less time than LC 2016)
- Playgrounds are extremely useful to get the initial Composite app up and running
- fell in love with VS Code during the process (Still like Apex work with Illuminated Cloud)

It's early days and improvements will come - t√∫s maith leath na hoibre